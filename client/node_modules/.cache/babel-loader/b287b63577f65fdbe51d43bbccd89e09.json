{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyDKSZXWxUNHAGpEOafg6V8vnHbcP3e6QbU\",\n  authDomain: \"go-grocery-db.firebaseapp.com\",\n  databaseURL: \"https://go-grocery-db.firebaseio.com\",\n  projectId: \"go-grocery-db\",\n  storageBucket: \"go-grocery-db.appspot.com\",\n  messagingSenderId: \"385738168889\",\n  appId: \"1:385738168889:web:a3274c6695a6c912b70be8\",\n  measurementId: \"G-YN60PH7FK5\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const collectionRef = firestore.collection('users');\n  const snapShot = await userRef.get();\n  const collectionSnapshot = await collectionRef.get();\n  console.log({\n    collectionSnapshot\n  });\n  console.log(snapShot);\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('Error creating user.', error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/home/mann/go-grocery/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collection","snapShot","get","collectionSnapshot","console","log","exists","displayName","email","createdAt","Date","set","error","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AAEA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,+BAFD;AAGXC,EAAAA,WAAW,EAAE,sCAHF;AAIXC,EAAAA,SAAS,EAAE,eAJA;AAKXC,EAAAA,aAAa,EAAE,2BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAG,CAACD,QAAJ,EAAc;AAGd,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqB,OAArB,CAAtB;AAEA,QAAMC,QAAQ,GAAG,MAAMN,OAAO,CAACO,GAAR,EAAvB;AACF,QAAMC,kBAAkB,GAAG,MAAMJ,aAAa,CAACG,GAAd,EAAjC;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACF,IAAAA;AAAD,GAAZ;AAGEC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;;AAEA,MAAG,CAACA,QAAQ,CAACK,MAAb,EAAoB;AAClB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBf,QAA/B;AACA,UAAMgB,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAG;AACD,YAAMf,OAAO,CAACgB,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AACHC,QAAAA,KADG;AACGC,QAAAA,SADH;AACc,WAAGf;AADjB,OAAZ,CAAN;AAGD,KAJD,CAIE,OAAMkB,KAAN,EAAa;AACbR,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCO,KAAK,CAACC,OAA1C;AACD;AACF;;AAED,SAAOlB,OAAP;AACD,CA7BM;AA+BLb,QAAQ,CAACgC,aAAT,CAAuB/B,MAAvB;AAEA,OAAO,MAAMgC,IAAI,GAAGjC,QAAQ,CAACiC,IAAT,EAAb;AACP,OAAO,MAAMnB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAMoB,QAAQ,GAAG,IAAIlC,QAAQ,CAACiC,IAAT,CAAcE,kBAAlB,EAAjB;AAEAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAE;AAAT,CAA7B;AAGA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAelC,QAAf","sourcesContent":["import firebase from 'firebase/app';\n\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyDKSZXWxUNHAGpEOafg6V8vnHbcP3e6QbU\",\n    authDomain: \"go-grocery-db.firebaseapp.com\",\n    databaseURL: \"https://go-grocery-db.firebaseio.com\",\n    projectId: \"go-grocery-db\",\n    storageBucket: \"go-grocery-db.appspot.com\",\n    messagingSenderId: \"385738168889\",\n    appId: \"1:385738168889:web:a3274c6695a6c912b70be8\",\n    measurementId: \"G-YN60PH7FK5\"\n  };\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if(!userAuth) return;\n\n  \n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const collectionRef = firestore.collection('users');\n\n  const snapShot = await userRef.get();\nconst collectionSnapshot = await collectionRef.get();\nconsole.log({collectionSnapshot})\n\n\n  console.log(snapShot) \n\n  if(!snapShot.exists){\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try{\n      await userRef.set({\n        displayName, email,createdAt, ...additionalData\n      })\n    } catch(error) {\n      console.log('Error creating user.', error.message);\n    }\n  }\n\n  return userRef;\n}\n\n  firebase.initializeApp(config);\n\n  export const auth = firebase.auth();\n  export const firestore = firebase.firestore();\n\n  const provider = new firebase.auth.GoogleAuthProvider();\n\n  provider.setCustomParameters({prompt: 'select_account'});\n\n\n  export const signInWithGoogle = () => auth.signInWithPopup(provider);\n\n  export default firebase;"]},"metadata":{},"sourceType":"module"}