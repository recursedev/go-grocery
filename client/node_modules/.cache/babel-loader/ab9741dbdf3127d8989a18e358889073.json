{"ast":null,"code":"import { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nexport function* fetchCollectionAsync() {\n  yield console.log('I\\'m hired');\n\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  } // collectionRef\n  // \t.get()\n  // \t.then((snapshot) => {\n  // \t\tconst collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  // \t\tdispatch(fetchCollectionsSuccess(collectionsMap));\n  // \t})\n  //   .catch((error) => dispatch(fetchCollectionFailure(error.message)));\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionAsync);\n}\nexport function* shopSagas() {\n  yield;\n}","map":{"version":3,"sources":["/home/mann/go-grocery/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","all","ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA0C,oBAA1C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD;AAEA,SACEC,uBADF,EAEEC,uBAFF,QAGO,gBAHP;AAKA,OAAO,UAAUC,oBAAV,GAAgC;AACrC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;;AAEA,MAAG;AACD,UAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMf,IAAI,CAACK,+BAAD,EAAkCQ,QAAlC,CAAjC;AACA,UAAMZ,GAAG,CAACK,uBAAuB,CAACS,cAAD,CAAxB,CAAT;AACD,GALD,CAKE,OAAMC,KAAN,EAAY;AACZ,UAAMf,GAAG,CAACM,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAT;AACD,GAVoC,CAcrC;AACA;AACA;AACA;AACA;AACA;AACE;;AAIH;AAED,OAAO,UAAUC,qBAAV,GAAiC;AACtC,QAAMnB,UAAU,CACdI,eAAe,CAACgB,uBADF,EAEdX,oBAFc,CAAhB;AAGD;AAED,OAAO,UAAUY,SAAV,GAAqB;AAC1B;AACD","sourcesContent":["import { takeLatest, call, put, all} from \"redux-saga/effects\";\r\n\r\nimport ShopActionTypes from './shop.types';\r\n\r\nimport {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils'\r\n\r\nimport {\r\n  fetchCollectionsSuccess,\r\n  fetchCollectionsFailure\r\n} from './shop.actions'\r\n\r\nexport function* fetchCollectionAsync(){\r\n  yield console.log('I\\'m hired')\r\n\r\n  try{\r\n    const collectionRef = firestore.collection(\"collections\");\r\n    const snapshot = yield collectionRef.get();\r\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot)\r\n    yield put(fetchCollectionsSuccess(collectionsMap));\r\n  } catch(error){\r\n    yield put(fetchCollectionsFailure(error.message));\r\n  }\r\n\r\n\r\n  \r\n  // collectionRef\r\n\t\t// \t.get()\r\n\t\t// \t.then((snapshot) => {\r\n\t\t// \t\tconst collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n\t\t// \t\tdispatch(fetchCollectionsSuccess(collectionsMap));\r\n\t\t// \t})\r\n    //   .catch((error) => dispatch(fetchCollectionFailure(error.message)));\r\n      \r\n\r\n\r\n}\r\n\r\nexport function* fetchCollectionsStart(){\r\n  yield takeLatest(\r\n    ShopActionTypes.FETCH_COLLECTIONS_START, \r\n    fetchCollectionAsync)\r\n}\r\n\r\nexport function* shopSagas(){\r\n  yield\r\n}\r\n"]},"metadata":{},"sourceType":"module"}