{"ast":null,"code":"import { takeEvery } from \"redux-saga/effects\";\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionAsync() {\n  yield console.log('I\\'m hired');\n  const collectionRef = firestore.collection(\"collections\");\n  dispatch(fetchCollectionsStart());\n  collectionRef.get().then(snapshot => {\n    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionsMap));\n  }).catch(error => dispatch(fetchCollectionFailure(error.message)));\n}\nexport function* fetchCollectionStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["/home/mann/go-grocery/src/redux/shop/shop.sagas.js"],"names":["takeEvery","ShopActionTypes","fetchCollectionAsync","console","log","collectionRef","firestore","collection","dispatch","fetchCollectionsStart","get","then","snapshot","collectionsMap","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","catch","error","fetchCollectionFailure","message","fetchCollectionStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,oBAAV,GAAgC;AACrC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AAEA,QAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAAtB;AACAC,EAAAA,QAAQ,CAACC,qBAAqB,EAAtB,CAAR;AAEAJ,EAAAA,aAAa,CACXK,GADF,GAEEC,IAFF,CAEQC,QAAD,IAAc;AACnB,UAAMC,cAAc,GAAGC,+BAA+B,CAACF,QAAD,CAAtD;AACAJ,IAAAA,QAAQ,CAACO,uBAAuB,CAACF,cAAD,CAAxB,CAAR;AACA,GALF,EAMKG,KANL,CAMYC,KAAD,IAAWT,QAAQ,CAACU,sBAAsB,CAACD,KAAK,CAACE,OAAP,CAAvB,CAN9B;AAQD;AAED,OAAO,UAAUC,oBAAV,GAAgC;AACrC,QAAMpB,SAAS,CACbC,eAAe,CAACoB,uBADH,EAEbnB,oBAFa,CAAf;AAGD","sourcesContent":["import { takeEvery } from \"redux-saga/effects\";\r\n\r\nimport ShopActionTypes from './shop.types';\r\n\r\nexport function* fetchCollectionAsync(){\r\n  yield console.log('I\\'m hired')\r\n\r\n  const collectionRef = firestore.collection(\"collections\");\r\n\t\tdispatch(fetchCollectionsStart());\r\n\r\n\t\tcollectionRef\r\n\t\t\t.get()\r\n\t\t\t.then((snapshot) => {\r\n\t\t\t\tconst collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n\t\t\t\tdispatch(fetchCollectionsSuccess(collectionsMap));\r\n\t\t\t})\r\n      .catch((error) => dispatch(fetchCollectionFailure(error.message)));\r\n      \r\n}\r\n\r\nexport function* fetchCollectionStart(){\r\n  yield takeEvery(\r\n    ShopActionTypes.FETCH_COLLECTIONS_START, \r\n    fetchCollectionAsync)\r\n}"]},"metadata":{},"sourceType":"module"}