{"ast":null,"code":"var _jsxFileName = \"/home/mann/go-grocery/src/components/sign-in/sign-in.component.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { SignInContainer, SignInTitle, ButtonsBarContainer } from './sign-in.styles';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\n\nconst SignIn = ({\n  emailSignInStart,\n  googleSignInStart\n}) => {\n  const [userCredentials, setCredentials] = useState({\n    email: '',\n    password: ''\n  });\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const {\n      email,\n      password\n    } = userCredentials;\n    emailSignInStart(email, password);\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setCredentials({ ...userCredentials,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(SignInContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(SignInTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, \"I already have an account\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, \"Sign in with your email address and password\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: this.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    value: this.state.email,\n    label: \"email\",\n    required: true,\n    handleChange: this.handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    value: this.state.password,\n    label: \"password\",\n    required: true,\n    handleChange: this.handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(ButtonsBarContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }\n  }, \" sign in  \"), /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: googleSignInStart,\n    isGoogleSignIn: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }\n  }, \" Sign in with Google \"))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/home/mann/go-grocery/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","useEffect","connect","SignInContainer","SignInTitle","ButtonsBarContainer","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignIn","userCredentials","setCredentials","email","password","handleSubmit","event","preventDefault","handleChange","value","name","target","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React , {useState, useEffect} from 'react';\nimport  {connect} from 'react-redux'\n\nimport {\n    SignInContainer,\n    SignInTitle,\n    ButtonsBarContainer\n  } from './sign-in.styles';\n\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component'\n\n\nimport {googleSignInStart ,emailSignInStart} from '../../redux/user/user.actions'\n\n\nconst SignIn = ({emailSignInStart, googleSignInStart }) => {\n    const [userCredentials, setCredentials] = useState({email:'' , password:''});\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        \n        const {email, password } = userCredentials;\n\n        emailSignInStart(email, password)\n    }\n\n    const handleChange = event =>{\n        const {value,name} = event.target;\n        setCredentials({ ...userCredentials, [name]: value})\n    };\n\n\n\n\n        return (\n\t\t\t<SignInContainer>\n\t\t\t\t<SignInTitle>I already have an account</SignInTitle>\n\t\t\t\t<span>Sign in with your email address and password</span>\n\n\t\t\t\t<form onSubmit={this.handleSubmit}>\n                    <FormInput \n                        name=\"email\" \n                        type = \"email\"  \n                        value={this.state.email} \n                        label=\"email\"\n                        required \n                        handleChange={this.handleChange} />\n                    <FormInput \n                        name=\"password\" \n                        type = \"password\" \n                        value={this.state.password} \n                        label=\"password\"\n                        required \n                        handleChange={this.handleChange}\n                        />\n                    <ButtonsBarContainer>\n                        <CustomButton type = \"submit\" > sign in  </CustomButton>\n                        <CustomButton \n                        type='button'\n                        onClick={googleSignInStart} \n                        isGoogleSignIn > Sign in with Google </CustomButton>\n                    </ButtonsBarContainer>\n                </form>\n\t\t\t</SignInContainer>\n\t\t);\n    \n}\n\nconst mapDispatchToProps = dispatch => ({\n    googleSignInStart: () => dispatch(googleSignInStart()),\n    emailSignInStart: (email, password) => dispatch(emailSignInStart({email, password}))\n})\n\nexport default connect(null, mapDispatchToProps)(SignIn)"]},"metadata":{},"sourceType":"module"}