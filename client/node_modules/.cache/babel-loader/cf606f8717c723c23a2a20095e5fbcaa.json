{"ast":null,"code":"var _jsxFileName = \"/home/mann/go-grocery/src/components/sign-in/sign-in.component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { SignInContainer, SignInTitle, ButtonsBarContainer } from './sign-in.styles';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\n\nclass SignIn extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n    };\n\n    this.handleChange = event => {\n      const {\n        value,\n        name\n      } = event.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      email: '',\n      password: ''\n    };\n  }\n\n  render() {\n    const {\n      googleSignInStart\n    } = this.props;\n    return /*#__PURE__*/React.createElement(SignInContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(SignInTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 5\n      }\n    }, \"I already have an account\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }\n    }, \"Sign in with your email address and password\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      name: \"email\",\n      type: \"email\",\n      value: this.state.email,\n      label: \"email\",\n      required: true,\n      handleChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"password\",\n      type: \"password\",\n      value: this.state.password,\n      label: \"password\",\n      required: true,\n      handleChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ButtonsBarContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CustomButton, {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }\n    }, \" sign in  \"), /*#__PURE__*/React.createElement(CustomButton, {\n      type: \"button\",\n      onClick: googleSignInStart,\n      isGoogleSignIn: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }\n    }, \" Sign in with Google \"))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    pass\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/home/mann/go-grocery/src/components/sign-in/sign-in.component.jsx"],"names":["React","connect","SignInContainer","SignInTitle","ButtonsBarContainer","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignIn","Component","constructor","props","handleSubmit","event","preventDefault","handleChange","value","name","target","setState","state","email","password","render","mapDispatchToProps","dispatch","pass"],"mappings":"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","sourcesContent":["import React from 'react';\nimport  {connect} from 'react-redux'\n\nimport {\n    SignInContainer,\n    SignInTitle,\n    ButtonsBarContainer\n  } from './sign-in.styles';\n\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component'\n\n\nimport {googleSignInStart ,emailSignInStart} from '../../redux/user/user.actions'\n\n\nclass SignIn extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            email:'',\n            password:''\n        }\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        \n    \n\n \n    }\n\n    handleChange = event =>{\n        const {value,name} = event.target;\n        this.setState({[name]: value})\n    }\n\n\n\n    render() {\n        const {googleSignInStart} = this.props;\n        return (\n\t\t\t<SignInContainer>\n\t\t\t\t<SignInTitle>I already have an account</SignInTitle>\n\t\t\t\t<span>Sign in with your email address and password</span>\n\n\t\t\t\t<form onSubmit={this.handleSubmit}>\n                    <FormInput \n                        name=\"email\" \n                        type = \"email\"  \n                        value={this.state.email} \n                        label=\"email\"\n                        required \n                        handleChange={this.handleChange} />\n                    <FormInput \n                        name=\"password\" \n                        type = \"password\" \n                        value={this.state.password} \n                        label=\"password\"\n                        required \n                        handleChange={this.handleChange}\n                        />\n                    <ButtonsBarContainer>\n                        <CustomButton type = \"submit\" > sign in  </CustomButton>\n                        <CustomButton \n                        type='button'\n                        onClick={googleSignInStart} \n                        isGoogleSignIn > Sign in with Google </CustomButton>\n                    </ButtonsBarContainer>\n                </form>\n\t\t\t</SignInContainer>\n\t\t);\n    }\n    \n}\n\nconst mapDispatchToProps = dispatch => ({\n    googleSignInStart: () => dispatch(googleSignInStart()),\n    emailSignInStart: (email, password) => dispatch(emailSignInStart({email, pass}))\n})\n\nexport default connect(null, mapDispatchToProps)(SignIn)"]},"metadata":{},"sourceType":"module"}