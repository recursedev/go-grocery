{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpStart } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapShotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    display\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n  } catch (error) {}\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(signUpStart)]);\n}","map":{"version":3,"sources":["/home/mann/go-grocery/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpStart","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapShotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","display","createUserWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects'\n\nimport UserActionTypes from './user.types'\n\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpStart } from './user.actions'\n\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils'\n\n\nexport function* getSnapShotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\n  } catch (error) {\n    yield put(signInFailure(error))\n  }\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error))\n  }\n}\n\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth)\n  } catch (error) {\n    yield put(signInFailure(error))\n  }\n}\n\nexport function* signOut(){\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess())\n  } catch (error) {\n    yield put(signOutFailure(error))\n  }\n}\n\nexport function* signUp( { payload: { email, password, display }} ){\n  try {\n    const {user} = yield auth.createUserWithEmailAndPassword(email,password)\n  } catch (error) {\n    \n  }\n}\n\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\n\n\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\n\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut)\n}\n\n\nexport function* onSignUpStart(){\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp )\n}\n\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart),\n  call(onEmailSignInStart),\n  call(onCheckUserSession),\n  call(onSignOutStart),\n  call(signUpStart)\n])\n}\n\n\n"]},"metadata":{},"sourceType":"module"}